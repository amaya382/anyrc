#!/usr/bin/env bash

ANYRC_ENV='docker'

init() {
  DOCKER_SUBCMD="$1"; shift; # expect 'run' or 'exec'
  DOCKER_OPTS=''

  case "${DOCKER_SUBCMD}" in
    run )
      while [[ -n "$1" ]]; do
        case "$1" in
          --add-host=* | -a=* | --attach=* | --blkio-weight=* | --blkio-weight-device=* | --cap-add=* | --cap-drop=* | --cgroup-parent=* | --cidfile=* | --cpu-period=* | --cpu-quota=* | --cpu-rt-period=* | --cpu-rt-runtime=* | -c=* | --cpu-shares=* | --cpus=* | --cpuset-cpus=* | --cpuset-mems=* | --detach-keys=* | --device=* | --device-cgroup-rule=* | --device-read-bps=* | --device-read-iops=* | --device-write-bps=* | --device-write-iops=* | --dns=* | --dns-option=* | --dns-search=* | --domainname=* | --entrypoint=* | -e=* | --env=* | --env-file=* | --expose=* | --gpus=* | -r=* | --group-add=* | --health-cmd=* | --health-interval=* | --health-retries=* | --health-start-period=* | -r=* | --health-timeout=* | -h=* | --hostname=* | --ip=* | --ip=* | --ipc=* | --isolation=* | --kernel-memory=* | -l=* | --label=* | --label-file=* | --link=* | --link-local-ip=* | -l=* | --log-driver=* | --log-opt=* | --mac-address=* | -m=* | --memory=* | --memory-reservation=* | --memory-swap=* | --memory-swappiness=* | --mount=* | --name=* | --network=* | --network-alias=* | -s=* | -s=* | --oom-score-adj=* | --pid=* | --pids-limit=* | --platform=* | -p=* | --privileged=* | -p=* | --publish=* | --restart=* | --runtime=* | --security-opt=* | --shm-size=* | --stop-signal=* | --stop-timeout=* | --storage-opt=* | --sysctl=* | --tmpfs=* | --ulimit=* | -u=* | --user=* | --userns=* | --uts=* | -v=* | --volume=* | --volume-driver=* | --volumes-from=* | -w=* | --workdir=* )
            DOCKER_OPTS="${DOCKER_OPTS} $1"; ;;
          --add-host | -a | --attach | --blkio-weight | --blkio-weight-device | --cap-add | --cap-drop | --cgroup-parent | --cidfile | --cpu-period | --cpu-quota | --cpu-rt-period | --cpu-rt-runtime | -c | --cpu-shares | --cpus | --cpuset-cpus | --cpuset-mems | --detach-keys | --device | --device-cgroup-rule | --device-read-bps | --device-read-iops | --device-write-bps | --device-write-iops | --dns | --dns-option | --dns-search | --domainname | --entrypoint | -e | --env | --env-file | --expose | --gpus | -r | --group-add | --health-cmd | --health-interval | --health-retries | --health-start-period | -r | --health-timeout | -h | --hostname | --ip | --ip | --ipc | --isolation | --kernel-memory | -l | --label | --label-file | --link | --link-local-ip | -l | --log-driver | --log-opt | --mac-address | -m | --memory | --memory-reservation | --memory-swap | --memory-swappiness | --mount | --name | --network | --network-alias | -s | -s | --oom-score-adj | --pid | --pids-limit | --platform | -p | --privileged | -p | --publish | --restart | --runtime | --security-opt | --shm-size | --stop-signal | --stop-timeout | --storage-opt | --sysctl | --tmpfs | --ulimit | -u | --user | --userns | --uts | -v | --volume | --volume-driver | --volumes-from | -w | --workdir )
            DOCKER_OPTS="${DOCKER_OPTS} $1 $2"; shift ;;
          -* )
            DOCKER_OPTS="${DOCKER_OPTS} $1"; ;;
          * )
            if [ -z "${DOCKER_IMAGE:+_}" ]; then
              DOCKER_IMAGE="$1"
            elif [ -z "${REMOTE_SHELL:+_}" ]; then
              REMOTE_SHELL="$1"
            fi; ;;
        esac
        shift
      done
      if [ -z "${DOCKER_IMAGE:+_}" ] || [ -z "${REMOTE_SHELL:+_}" ]; then
        exit 1
      fi; ;;
    exec )
      while [[ -n "$1" ]]; do
        case "$1" in
          -e=* | --env=* | -u=* | --user=* | -w=* | --workdir=* )
            DOCKER_OPTS="${DOCKER_OPTS} $1"; ;;
          -e | --env | -u | --user | -w | --workdir )
            DOCKER_OPTS="${DOCKER_OPTS} $1 $2"; shift ;;
          -* )
            DOCKER_OPTS="${DOCKER_OPTS} $1"; ;;
          * )
            if [ -z "${DOCKER_CONTAINER:+_}" ]; then
              DOCKER_CONTAINER="$1"
            elif [ -z "${REMOTE_SHELL:+_}" ]; then
              REMOTE_SHELL="$1"
            fi; ;;
        esac
        shift
      done
      if [ -z "${DOCKER_CONTAINER:+_}" ] || [ -z "${REMOTE_SHELL:+_}" ]; then
        exit 1
      fi; ;;
    * )
      DOCKER_OPTS="${DOCKER_SUBCMD} $@"; ;;
  esac
}

mk_tmp_dir() {
  case "${DOCKER_SUBCMD}" in
    run )
      :; ;;
    exec )
      TMP_DIR="$(docker exec ${DOCKER_OPTS} ${DOCKER_CONTAINER} mktemp -d /tmp/anyrc.XXXXXX)"; ;;
  esac
}

transfer() {
  case "${DOCKER_SUBCMD}" in
    run )
      :; ;;
    exec )
      # Transfer .anyrc
      docker cp -L "${ANYRC_DANYRC}" "${DOCKER_CONTAINER}:${TMP_DIR}/${DANYRC_NAME}"

      if [ ! -z "${ANYRC_DOCKER_WO_TAR:+_}" ] || [ ! -z "${ANYRC_WO_TAR:+_}" ]; then
        # Transfer .anyrc.d
        docker cp -L "${ANYRC_DANYRCD}" "${DOCKER_CONTAINER}:${TMP_DIR}/${DANYRCD_NAME}"

        # Transfer *rc
        local CMD_DIR="$(abs_dirname $0)"
        for cmd in "${ANYRC_CMD}" "${ANYRC_CMDS[@]}"; do
          if [ -f "${CMD_DIR}/${cmd}" ]; then
            docker cp -L "${CMD_DIR}/${cmd}" "${DOCKER_CONTAINER}:${TMP_DIR}/${cmd}"
          fi
        done
      else
        # Transfer .anyrc.d
        tar cz -h -C "${DANYRCD_DIR}" "${DANYRCD_BASE}" \
        | docker exec -i ${DOCKER_OPTS} ${DOCKER_CONTAINER} sh -c "tar xz -C ${TMP_DIR}"

        # Transfer *rc
        local CMD_DIR="$(abs_dirname $0)"
        local RCS=()
        for cmd in "${ANYRC_CMD}" "${ANYRC_CMDS[@]}"; do
          if [ -f "${CMD_DIR}/${cmd}" ]; then
            RCS=("${RCS[@]}" "${cmd}")
          fi
        done
        tar czf - -h -C ${CMD_DIR} "${RCS[@]}" \
        | docker exec -i ${DOCKER_OPTS} "${DOCKER_CONTAINER}" sh -c "tar xz -C ${TMP_DIR}"
      fi; ;;
  esac
}

connect() {
  case "${DOCKER_SUBCMD}" in
    run )
      if [ $(which base64) ]; then
        ENCODE=('base64')
      elif [ $(which openssl) ]; then
        ENCODE=('openssl' 'enc' '-base64')
      fi
      if [ -z "${ENCODE:+_}" ]; then
        echo 'dockerrc requires base64 or openssl command' 1>&2
        exit 1
      fi
      local CMD_DIR="$(abs_dirname $0)"
      docker run -it ${DOCKER_OPTS} "${DOCKER_IMAGE}" \
        "${REMOTE_SHELL}" -c "
          export DANYRC_NAME=\"${DANYRC_NAME}\"
          export DANYRCD_NAME=\"${DANYRCD_NAME}\"
          export ANYRC_ROOT=\"\$(mktemp -d /tmp/anyrc.XXXXXX)\"
          export ANYRC_DANYRC=\"\${ANYRC_ROOT}/\${DANYRC_NAME}\"
          export ANYRC_DANYRCD=\"\${ANYRC_ROOT}/\${DANYRCD_NAME}\"
          export ANYRC_HOME=\"\${ANYRC_DANYRCD}\"
          export PATH=\"\${ANYRC_ROOT}:\${PATH}\"
          trap \"rm -rf \${ANYRC_ROOT}; exit\" 0
          mkdir -p \${ANYRC_DANYRCD}
          echo '$(cat "${ANYRC_DANYRC}" | base64)' | base64 -d > \${ANYRC_DANYRC}
          echo '$(tar czf - -h -C ${CMD_DIR} ${ANYRC_CMD} ${ANYRC_CMDS[@]} | base64)' | base64 -d | tar mxzf - -C \${ANYRC_ROOT}
          echo '$(tar czf - -h -C ${DANYRCD_DIR} ${DANYRCD_BASE} | base64)' | base64 -d | tar mxzf - -C \${ANYRC_ROOT}
          source \"\${ANYRC_DANYRC}\"
          [ \"${REMOTE_SHELL##*/}\" = 'bash' ] \
          && bash --rcfile \${ANYRC_DANYRC} \
          || ${REMOTE_SHELL}"; ;;
    exec )
      docker exec -it ${DOCKER_OPTS} "${DOCKER_CONTAINER}" \
        "${REMOTE_SHELL}" -c "
          export DANYRC_NAME=\"${DANYRC_NAME}\"
          export DANYRCD_NAME=\"${DANYRCD_NAME}\"
          export ANYRC_ROOT=\"${TMP_DIR}\"
          export ANYRC_DANYRC=\"\${ANYRC_ROOT}/\${DANYRC_NAME}\"
          export ANYRC_DANYRCD=\"\${ANYRC_ROOT}/\${DANYRCD_NAME}\"
          export ANYRC_HOME=\"\${ANYRC_DANYRCD}\"
          export SHELL=\$(which \"${REMOTE_SHELL}\")
          export PATH=\"\${PATH}:\${ANYRC_ROOT}\"
          trap \"rm -rf \${ANYRC_ROOT}; exit\" 0
          source \"\${ANYRC_DANYRC}\"
          [ \"${REMOTE_SHELL##*/}\" = 'bash' ] \
            && bash --rcfile \${ANYRC_DANYRC} \
            || ${REMOTE_SHELL}"; ;;
    * )
      docker ${DOCKER_OPTS}; ;;
  esac
}

source anyrc
