#!/usr/bin/env bash

ANYRC_ENV='docker'

init() {
  DOCKER_SUBCMD="$1"; shift # expect 'run' or 'exec'
  DOCKER_GLOBAL_OPTS=''
  DOCKER_RUN_OPTS=''
  DOCKER_EXEC_OPTS=''
  DOCKER_UNKNOWN_OPTS=''

  case "${DOCKER_SUBCMD}" in
    run )
      while [[ -n "$1" ]]; do
        case "$1" in
          --help )
            docker "${DOCKER_SUBCMD}" "$1"
            exit 0 ;;

          -D | --debug | --tls | --tlsverify )
            DOCKER_GLOBAL_OPTS="${DOCKER_GLOBAL_OPTS} $1" ;;
          --config | -c | --context | -H | --host | -l | --log-level | --tlscacert | --tlscert | --tlskey )
            DOCKER_GLOBAL_OPTS="${DOCKER_GLOBAL_OPTS} $1 $2"; shift ;;
          --config=* | -c=* | --context=* | -H=* | --host=* | -l=* | --log-level=* | --tlscacert=* | --tlscert=* | --tlskey=* )
            DOCKER_GLOBAL_OPTS="${DOCKER_GLOBAL_OPTS} $1" ;;

          -d | --detach | --disable-content-trust | --init | -i | --interactive | --no-healthcheck | --oom-kill-disable | --privileged | -P | --publish-all | --read-only | --rm | --sig-proxy | -t | --tty | -it | -ti )
            DOCKER_RUN_OPTS="${DOCKER_RUN_OPTS} $1" ;;
          --add-host | -a | --attach | --blkio-weight-device | --cap-add | --cap-drop | --cgroup-parent | --cidfile | --cpu-period | --cpu-quota | --cpu-rt-period | --cpu-rt-runtime | -c | --cpu-shares | --cpus | --cpuset-cpus | --cpuset-mems | --detach-keys | --device | --device-cgroup-rule | --device-read-bps | --device-read-iops | --device-write-bps | --device-write-iops | --dns | --dns-option | --dns-search | --domainname | --entrypoint | -e | --env | --env-file | --expose | --group-add | --health-cmd | --health-interval | --health-retries | --health-start-period | --health-timeout | -h | --hostname | --ip | --ip6 | --ipc | --isolation | --kernel-memory | -l | --label | --label-file | --link | --link-local-ip | --log-driver | --log-opt | --mac-address | -m | --memory | --memory-reservation | --memory-swap | --memory-swappiness | --mount | --name | --network | --network-alias | --oom-score-adj | --pid | --pids-limit | --platform | -p | --publish | --restart | --runtime | --security-opt | --shm-size | --stop-signal | --stop-timeout | --storage-opt | --sysctl | --tmpfs | --ulimit | -u | --user | --userns | --uts | -v | --volume | --volume-driver | --volumes-from | -w | --workdir )
            DOCKER_RUN_OPTS="${DOCKER_RUN_OPTS} $1 $2"; shift ;;
          --add-host=* | -a=* | --attach=* | --blkio-weight-device=* | --cap-add=* | --cap-drop=* | --cgroup-parent=* | --cidfile=* | --cpu-period=* | --cpu-quota=* | --cpu-rt-period=* | --cpu-rt-runtime=* | -c=* | --cpu-shares=* | --cpus=* | --cpuset-cpus=* | --cpuset-mems=* | --detach-keys=* | --device=* | --device-cgroup-rule=* | --device-read-bps=* | --device-read-iops=* | --device-write-bps=* | --device-write-iops=* | --dns=* | --dns-option=* | --dns-search=* | --domainname=* | --entrypoint=* | -e=* | --env=* | --env-file=* | --expose=* | --group-add=* | --health-cmd=* | --health-interval=* | --health-retries=* | --health-start-period=* | --health-timeout=* | -h=* | --hostname=* | --ip=* | --ip6=* | --ipc=* | --isolation=* | --kernel-memory=* | -l=* | --label=* | --label-file=* | --link=* | --link-local-ip=* | --log-driver=* | --log-opt=* | --mac-address=* | -m=* | --memory=* | --memory-reservation=* | --memory-swap=* | --memory-swappiness=* | --mount=* | --name=* | --network=* | --network-alias=* | --oom-score-adj=* | --pid=* | --pids-limit=* | --platform=* | -p=* | --publish=* | --restart=* | --runtime=* | --security-opt=* | --shm-size=* | --stop-signal=* | --stop-timeout=* | --storage-opt=* | --sysctl=* | --tmpfs=* | --ulimit=* | -u=* | --user=* | --userns=* | --uts=* | -v=* | --volume=* | --volume-driver=* | --volumes-from=* | -w=* | --workdir )
            DOCKER_RUN_OPTS="${DOCKER_RUN_OPTS} $1" ;;

          -* )
            # handle unknown opts as solo opts
            DOCKER_UNKNOWN_OPTS="${DOCKER_UNKNOWN_OPTS} $1" ;;
          * )
            if [ -z "${DOCKER_IMAGE:+_}" ]; then
              DOCKER_IMAGE="$1"
            elif [ -z "${REMOTE_SHELL:+_}" ]; then
              REMOTE_SHELL="$1"
            fi ;;
        esac
        shift
      done
      if [ -z "${DOCKER_IMAGE:+_}" ] || [ -z "${REMOTE_SHELL:+_}" ]; then
        exit 1
      fi ;;
    exec )
      while [[ -n "$1" ]]; do
        case "$1" in
          --help )
            docker "${DOCKER_SUBCMD}" "$1"
            exit 0 ;;

          -D | --debug | --tls | --tlsverify )
            DOCKER_GLOBAL_OPTS="${DOCKER_GLOBAL_OPTS} $1" ;;
          --config | -c | --context | -H | --host | -l | --log-level | --tlscacert | --tlscert | --tlskey )
            DOCKER_GLOBAL_OPTS="${DOCKER_GLOBAL_OPTS} $1 $2"
            shift ;;
          --config=* | -c=* | --context=* | -H=* | --host=* | -l=* | --log-level=* | --tlscacert=* | --tlscert=* | --tlskey=* )
            DOCKER_GLOBAL_OPTS="${DOCKER_GLOBAL_OPTS} $1" ;;

          -d | --detach | -i | --interactive | --privileged | -t | --tty | -it | -ti )
            DOCKER_EXEC_OPTS="${DOCKER_EXEC_OPTS} $1" ;;
          --detach-keys | -e | --env | -u | --user | -w | --workdir )
            DOCKER_EXEC_OPTS="${DOCKER_EXEC_OPTS} $1 $2"
            shift ;;
          --detach-keys=* | -e=* | --env=* | -u=* | --user=* | -w=* | --workdir=* )
            DOCKER_EXEC_OPTS="${DOCKER_EXEC_OPTS} $1" ;;

          -* )
            # handle unknown opts as solo opts
            DOCKER_UNKNOWN_OPTS="${DOCKER_UNKNOWN_OPTS} $1" ;;
          * )
            if [ -z "${DOCKER_CONTAINER:+_}" ]; then
              DOCKER_CONTAINER="$1"
            elif [ -z "${REMOTE_SHELL:+_}" ]; then
              REMOTE_SHELL="$1"
            fi ;;
        esac
        shift
      done
      if [ -z "${DOCKER_CONTAINER:+_}" ] || [ -z "${REMOTE_SHELL:+_}" ]; then
        exit 1
      fi ;;
    * )
      # pass through and then exit
      docker "${DOCKER_SUBCMD}" $@
      exit 0 ;;
  esac
}

mk_tmp_dir() {
  case "${DOCKER_SUBCMD}" in
    run )
      : ;;
    exec )
      TMP_DIR="$(docker exec ${DOCKER_GLOBAL_OPTS} ${DOCKER_CONTAINER} mktemp -d /tmp/anyrc.XXXXXX)"; ;;
  esac
}

transfer() {
  case "${DOCKER_SUBCMD}" in
    run )
      : ;;
    exec )
      # Transfer .anyrc
      docker cp -L ${DOCKER_GLOBAL_OPTS} "${ANYRC_DANYRC}" "${DOCKER_CONTAINER}:${TMP_DIR}/${DANYRC_NAME}"

      if [ ! -z "${ANYRC_DOCKER_WO_TAR:+_}" ] || [ ! -z "${ANYRC_WO_TAR:+_}" ]; then
        # Transfer .anyrc.d
        docker cp -L ${DOCKER_GLOBAL_OPTS} "${ANYRC_DANYRCD}" "${DOCKER_CONTAINER}:${TMP_DIR}/${DANYRCD_NAME}"

        # Transfer *rc
        local CMD_DIR="$(abs_dirname $0)"
        for cmd in "${ANYRC_CMD}" "${ANYRC_CMDS[@]}"; do
          if [ -f "${CMD_DIR}/${cmd}" ]; then
            docker cp -L ${DOCKER_GLOBAL_OPTS} "${CMD_DIR}/${cmd}" "${DOCKER_CONTAINER}:${TMP_DIR}/${cmd}"
          fi
        done
      else
        # Transfer .anyrc.d
        tar cz -h -C "${DANYRCD_DIR}" "${DANYRCD_BASE}" \
        | docker exec -i ${DOCKER_GLOBAL_OPTS} ${DOCKER_CONTAINER} sh -c "tar xz -C ${TMP_DIR}"

        # Transfer *rc
        local CMD_DIR="$(abs_dirname $0)"
        local RCS=()
        for cmd in "${ANYRC_CMD}" "${ANYRC_CMDS[@]}"; do
          if [ -f "${CMD_DIR}/${cmd}" ]; then
            RCS=("${RCS[@]}" "${cmd}")
          fi
        done
        tar czf - -h -C ${CMD_DIR} "${RCS[@]}" \
        | docker exec -i ${DOCKER_GLOBAL_OPTS} "${DOCKER_CONTAINER}" sh -c "tar xz -C ${TMP_DIR}"
      fi ;;
  esac
}

connect() {
  case "${DOCKER_SUBCMD}" in
    run )
      local CMD_DIR="$(abs_dirname $0)"
      docker run ${DOCKER_GLOBAL_OPTS} ${DOCKER_RUN_OPTS} "${DOCKER_IMAGE}" \
        "${REMOTE_SHELL}" -c "
          export DANYRC_NAME=\"${DANYRC_NAME}\"
          export DANYRCD_NAME=\"${DANYRCD_NAME}\"
          export ANYRC_ROOT=\"\$(mktemp -d /tmp/anyrc.XXXXXX)\"
          export ANYRC_DANYRC=\"\${ANYRC_ROOT}/\${DANYRC_NAME}\"
          export ANYRC_DANYRCD=\"\${ANYRC_ROOT}/\${DANYRCD_NAME}\"
          export ANYRC_HOME=\"\${ANYRC_DANYRCD}\"
          export PATH=\"\${ANYRC_ROOT}:\${PATH}\"
          trap \"rm -rf \${ANYRC_ROOT}; exit\" 0
          mkdir -p \${ANYRC_DANYRCD}
          echo '$(cat "${ANYRC_DANYRC}" | base64)' | base64 -d > \${ANYRC_DANYRC}
          echo '$(tar czf - -h -C ${CMD_DIR} ${ANYRC_CMD} ${ANYRC_CMDS[@]} | base64)' | base64 -d | tar mxzf - -C \${ANYRC_ROOT}
          echo '$(tar czf - -h -C ${DANYRCD_DIR} ${DANYRCD_BASE} | base64)' | base64 -d | tar mxzf - -C \${ANYRC_ROOT}
          source \"\${ANYRC_DANYRC}\"
          if [ \"${REMOTE_SHELL##*/}\" = 'bash' ]; then
            bash --rcfile \${ANYRC_DANYRC}
          else
            ${REMOTE_SHELL}
          fi" ;;
    exec )
      docker exec ${DOCKER_GLOBAL_OPTS} ${DOCKER_EXEC_OPTS} "${DOCKER_CONTAINER}" \
        "${REMOTE_SHELL}" -c "
          export DANYRC_NAME=\"${DANYRC_NAME}\"
          export DANYRCD_NAME=\"${DANYRCD_NAME}\"
          export ANYRC_ROOT=\"${TMP_DIR}\"
          export ANYRC_DANYRC=\"\${ANYRC_ROOT}/\${DANYRC_NAME}\"
          export ANYRC_DANYRCD=\"\${ANYRC_ROOT}/\${DANYRCD_NAME}\"
          export ANYRC_HOME=\"\${ANYRC_DANYRCD}\"
          export SHELL=\$(which \"${REMOTE_SHELL}\")
          export PATH=\"\${PATH}:\${ANYRC_ROOT}\"
          trap \"rm -rf \${ANYRC_ROOT}; exit\" 0
          source \"\${ANYRC_DANYRC}\"
          if [ \"${REMOTE_SHELL##*/}\" = 'bash' ]; then
            bash --rcfile \${ANYRC_DANYRC}
          else
            ${REMOTE_SHELL}
          fi" ;;
  esac
}

source anyrc
